@page "/user/add"
@page "/user/edit/{Id:int}"
@using BlazorApp.Logic
@using BlazorApp.Logic.Entities;
@using BlazorApp.Logic.Repositories
@using BlazorApp.Logic.Services;
@using BlazorApp.Logic.Interfaces;
@inject IRepository<User> UserService
@inject NavigationManager NavigationManager
<h1>@Title User</h1>
<hr />
<EditForm Model="@user" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="LastName" class="form-label">LastName</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.LastName" />
        </div>
        <ValidationMessage For="@(() => user.LastName)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Address</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Address" />
        </div>
        <ValidationMessage For="@(() => user.Address)" />
    </div>
    <div class="mb-3">
        <label for="PhoneNumber" class="form-label">Cell No</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.PhoneNumber" />
        </div>
        <ValidationMessage For="@(() => user.PhoneNumber)" />
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Email" />
        </div>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="form-group">
        <button type="submit" value="Save" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="Cancel" value="Cancel">Cancel</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";
    protected User user = new();
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            user = UserService.GetById(Id);
        }
    }
    protected async Task SaveUser()
    {
        if (user.Id != 0)
        {
            UserService.Update(user.Id, user);
        }
        else
        {
            UserService.Create(user);
        }
        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/userdetails");
    }
}