@page "/login/add"
@using BlazorApp.Logic
@using BlazorApp.Logic.Models
@using BlazorApp.Logic.Services;
@using BlazorApp.Logic.Interfaces;
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
<h1>@Title Client</h1>
<hr />
<EditForm Model="@client" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="LastName" class="form-label">LastName</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="client.LastName" />
        </div>
        <ValidationMessage For="@(() => client.LastName)" />
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="client.Email" />
        </div>
        <ValidationMessage For="@(() => client.Email)" />
    </div>
    <div class="mb-3">
        <label for="Password" class="form-label">Password</label>
        <div class="col-md-4">
            <InputText type="password" class="form-control" @bind-Value="client.Password" />
        </div>
        <ValidationMessage For="@(() => client.Password)" />
    </div>
    <div class="form-group">
        <button type="submit" value="Save" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="Cancel" value="Cancel">Cancel</button>
    </div>

</EditForm>
@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Login";
    protected LoginClientDto client = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            //user = UserService.GetById(Id);
        }
    }
    protected async Task SaveUser()
    {
        var success = AccountService.Login(client);
        if (success.Result)
        {
            NavigationManager.NavigateTo("/clientdetails");
        }
        else
        {
            Cancel();
        }
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/accessdenied");
    }
}